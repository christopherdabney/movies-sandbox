"""Sync all model schema differences

Revision ID: 8977d075fac1
Revises: adb79d179304
Create Date: 2025-10-05 11:58:21.037245

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8977d075fac1'
down_revision = 'adb79d179304'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=120),
               existing_nullable=False)
        batch_op.alter_column('first_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
        batch_op.alter_column('last_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)

    with op.batch_alter_table('movie', schema=None) as batch_op:
        batch_op.alter_column('title',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
        batch_op.alter_column('director',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.alter_column('genre',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)

    # Handle watchlist status conversion
    # Step 1: Drop the default
    op.execute("ALTER TABLE watchlist ALTER COLUMN status DROP DEFAULT")
    
    # Step 2: Map existing values to enum values
    op.execute("UPDATE watchlist SET status = 'to_watch' WHERE status = 'QUEUED'")
    op.execute("UPDATE watchlist SET status = 'watched' WHERE status = 'WATCHED'")
    
    # Step 3: Convert the column type
    op.execute("ALTER TABLE watchlist ALTER COLUMN status TYPE watchliststatus USING status::watchliststatus")
    
    # Step 4: Set new default
    op.execute("ALTER TABLE watchlist ALTER COLUMN status SET DEFAULT 'to_watch'::watchliststatus")
    
    # Step 5: Set NOT NULL
    op.execute("ALTER TABLE watchlist ALTER COLUMN status SET NOT NULL")
    
    # Other watchlist alterations
    with op.batch_alter_table('watchlist', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('movie_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('added_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_constraint(batch_op.f('watchlist_user_id_movie_id_key'), type_='unique')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('watchlist', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('watchlist_user_id_movie_id_key'), ['user_id', 'movie_id'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('added_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('movie_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    
    # Convert status back to varchar and restore original values
    op.execute("ALTER TABLE watchlist ALTER COLUMN status DROP DEFAULT")
    op.execute("ALTER TABLE watchlist ALTER COLUMN status TYPE VARCHAR(20)")
    op.execute("UPDATE watchlist SET status = 'QUEUED' WHERE status = 'to_watch'")
    op.execute("UPDATE watchlist SET status = 'WATCHED' WHERE status = 'watched'")
    op.execute("ALTER TABLE watchlist ALTER COLUMN status SET DEFAULT 'QUEUED'")

    with op.batch_alter_table('movie', schema=None) as batch_op:
        batch_op.alter_column('genre',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('director',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
        batch_op.alter_column('title',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    with op.batch_alter_table('member', schema=None) as batch_op:
        batch_op.alter_column('last_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('first_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)

    # ### end Alembic commands ###